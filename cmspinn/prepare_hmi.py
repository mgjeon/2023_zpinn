# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/07_hmi_bottom.ipynb.

# %% auto 0
__all__ = ['PrepareHMI']

# %% ../nbs/07_hmi_bottom.ipynb 3
import os
import glob
import numpy as np
from sunpy.map import Map
import matplotlib.pyplot as plt
from astropy import units as u

# %% ../nbs/07_hmi_bottom.ipynb 4
class PrepareHMI:
    def __init__(self, base_path, hmi_path):
        self.base_path = base_path
        os.makedirs(self.base_path, exist_ok=True)
        self.hmi_path = hmi_path
    
    def load_hmi_data(self, idx1=None, idx2=None):
        hmi_p_files = sorted(glob.glob(os.path.join(self.hmi_path, '*Bp.fits'))) 
        hmi_t_files = sorted(glob.glob(os.path.join(self.hmi_path, '*Bt.fits')))  
        hmi_r_files = sorted(glob.glob(os.path.join(self.hmi_path, '*Br.fits')))  

        if (idx1 is None) or (idx2 is None):
            self.data_paths = list(zip(hmi_p_files, hmi_t_files, hmi_r_files))
        else:
            self.data_paths = list(zip(hmi_p_files, hmi_t_files, hmi_r_files))[idx1:idx2]
        return self.data_paths

    def plot_hmi(self, idx):
        hmi_p, hmi_t, hmi_r = self.data_paths[idx]
        p_map = Map(hmi_p)
        t_map = Map(hmi_t)
        r_map = Map(hmi_r)
        p_map.peek()
        t_map.peek()
        r_map.peek()

    def meta_hmi(self, idx):
        hmi_p, hmi_t, hmi_r = self.data_paths[idx]
        p_map = Map(hmi_p)
        t_map = Map(hmi_t)
        r_map = Map(hmi_r)
        print("========Bp========")
        print(p_map.meta)
        print("==================")
        print()

        print("========Bt========")
        print(t_map.meta)
        print("==================")
        print()

        print("========Br========")
        print(r_map.meta)
        print("==================")
            
    def plot_bottom(self, idx, stride=2):
        hmi_p, hmi_t, hmi_r = self.data_paths[idx]
        p_map = Map(hmi_p)
        t_map = Map(hmi_t)
        r_map = Map(hmi_r)

        maps = [p_map, t_map, r_map]
        B_hmi = np.stack([maps[0].data, -maps[1].data, maps[2].data]).transpose()

        plt.close()
        fig, ax = plt.subplots(figsize=(6,6))
        CS = plt.imshow(B_hmi[:, :, 2].transpose(), origin='lower', cmap='gray', vmin=-3000, vmax=3000)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_title(r"$B_z$(z=0)" +f" | {B_hmi.shape}")
        fig.colorbar(CS)
        plt.show()

        maps_binned = [m.superpixel(u.Quantity((stride, stride), u.pixel), func=np.mean) for m in maps]
        B_binned = np.stack([maps_binned[0].data, -maps_binned[1].data, maps_binned[2].data]).transpose()
        
        plt.close()
        fig, ax = plt.subplots(figsize=(6,6))
        CS = plt.imshow(B_binned[:, :, 2].transpose(), origin='lower', cmap='gray', vmin=-3000, vmax=3000)
        ax.set_xlabel('x')
        ax.set_ylabel('y')
        ax.set_title(r"$B_z$(z=0)" +f" | {B_binned.shape}")
        fig.colorbar(CS)
        plt.show()

    def save_bottom(self, stride=2):
        for hmi_p, hmi_t, hmi_r in self.data_paths:
            obs_date = os.path.basename(hmi_p)[-27:-12]
            b_bottom_path = os.path.join(self.base_path, f'b_bottom_{obs_date}.npy')
            if os.path.exists(b_bottom_path):
                print(f'Exist {b_bottom_path}')
                continue

            p_map = Map(hmi_p)
            t_map = Map(hmi_t)
            r_map = Map(hmi_r)

            maps = [p_map, t_map, r_map]
            maps_binned = [m.superpixel(u.Quantity((stride, stride), u.pixel), func=np.mean) for m in maps]
            B_binned = np.stack([maps_binned[0].data, -maps_binned[1].data, maps_binned[2].data]).transpose()

            b_bottom = np.array(B_binned)

            with open(b_bottom_path, 'wb') as f:
                np.save(f, b_bottom)
            print(f"Saved {b_bottom_path}")
