# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/04_solar_data_download.ipynb.

# %% auto 0
__all__ = ['hmi_downloader', 'draw_hmi', 'draw_aia']

# %% ../nbs/04_solar_data_download.ipynb 2
import os
import drms

# %% ../nbs/04_solar_data_download.ipynb 3
class hmi_downloader:
    def __init__(self, jsoc_email):
        jsoc_email = 'mgjeon@khu.ac.kr'
        self.client = drms.Client(email=jsoc_email, verbose=True)

    def find_harpnum(self, start_time):
        ar_mapping = self.client.query('hmi.Mharp_720s[][%sZ]' % start_time.isoformat('_', timespec='seconds'),
                                       key=['NOAA_AR', 'HARPNUM'])
        return ar_mapping
    
    def setup_download_dir(self, download_dir, harp_num):
        self.download_dir = os.path.join(download_dir, f'AR{harp_num}')
        os.makedirs(self.download_dir, exist_ok=True)
    
    def download_hmi(self, harp_num, start_time, duration='0.1h', segments = 'Br, Bp, Bt', series='sharp_cea_720s'):

        ds = 'hmi.%s[%d][%s/%s]{%s}' % \
                (series, harp_num, start_time.isoformat('_', timespec='seconds'), duration, segments)

        hmi_dir = os.path.join(self.download_dir, 'hmi')
        os.makedirs(hmi_dir, exist_ok=True)

        r = self.client.export(ds, protocol='fits')
        r.wait()
        download_result = r.download(hmi_dir)
        return download_result
    
    def download_aia(self, start_time, end_time, wavelength='171'):
        ds = f'aia.lev1_euv_12s[{start_time.isoformat("_", timespec="seconds")} \
            / {(end_time - start_time).total_seconds()}s@60s][{wavelength}]{{image}}'
        
        hmi_dir = os.path.join(self.download_dir, f'aia{wavelength}')
        os.makedirs(hmi_dir, exist_ok=True)

        r = self.client.export(ds, protocol='fits')
        r.wait()
        download_result = r.download(hmi_dir)
        return download_result    

# %% ../nbs/04_solar_data_download.ipynb 15
from sunpy.map import Map
import matplotlib.pyplot as plt

# %% ../nbs/04_solar_data_download.ipynb 16
def draw_hmi(hmi_path):
    hmi_map = Map(hmi_path)
    hmi_map.peek()
    ref_wcs = hmi_map.wcs
    return ref_wcs

def draw_aia(aia_path, ref_wcs, wavelength):
    aia_map = Map(aia_path)
    aia_map.peek()
    obstime = aia_map.observer_coordinate.obstime
    obstime.format = 'iso'
    aia_repro_map = aia_map.reproject_to(ref_wcs)

    fig = plt.figure()
    ax = fig.add_subplot(projection=aia_repro_map)
    aia_repro_map.plot(axes=ax)
    plt.colorbar()
    plt.title(f"AIA {wavelength} Ã… {obstime.value}")
    plt.show()
