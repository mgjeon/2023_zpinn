# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/11_PINN_viz.ipynb.

# %% auto 0
__all__ = ['pinn_cube']

# %% ../nbs/11_PINN_viz.ipynb 3
import os
import numpy as np
import pyvista as pv
from tqdm import tqdm

# %% ../nbs/11_PINN_viz.ipynb 5
import torch

# %% ../nbs/11_PINN_viz.ipynb 6
from .mag_viz import create_physical_coordinates
from .pinn_nf2_old import BModel

# %% ../nbs/11_PINN_viz.ipynb 7
class pinn_cube:
    def __init__(self, save_path):
        self.device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')
        self.state = torch.load(save_path, map_location=self.device)
        self.model = self.state['model']
        self.cube_shape = self.state['cube_shape']
        self.b_norm = self.state['b_norm']
        self.spatial_norm = self.state['spatial_norm']
        
    def calculate_magnetic_fields(self, batch_size = 10000):
        device = self.device
        spatial_norm = self.spatial_norm
        b_norm = self.b_norm
        model = self.model
        
        Nx, Ny, Nz = self.cube_shape
        domain_bounds = (0, Nx-1, 0, Ny-1, 0, Nz-1)
        resolutions = (Nx, Ny, Nz)
        grid = create_physical_coordinates(domain_bounds, resolutions)
        domain_coords = np.array(grid.points)
        normalized_domain_coords = domain_coords / spatial_norm
        normalized_domain_coords = normalized_domain_coords
        normalized_domain_coords = torch.tensor(normalized_domain_coords, dtype=torch.float32)
        n_batch = int(np.ceil(normalized_domain_coords.shape[0] / batch_size))

        with torch.no_grad():
            cube = []
            for k in tqdm(range(n_batch)):
                batch_coords = normalized_domain_coords[k*batch_size : (k+1)*batch_size]
                # batch_coords.to(device)
                batch_coords = batch_coords.cuda()
                # model = model.to(batch_coords.device)
                model = model.cuda()
                cube += [model(batch_coords).detach().cpu()]
            cube = torch.cat(cube)
            B = cube.numpy()*b_norm
        
        Bx = B[:, 0]
        By = B[:, 1]
        Bz = B[:, 2]

        vectors = np.empty((grid.n_points, 3))
        vectors[:, 0] = Bx
        vectors[:, 1] = By
        vectors[:, 2] = Bz
        grid['B'] = vectors
        grid.active_vectors_name = 'B'
        magnitude = np.linalg.norm(vectors, axis=-1)
        grid['mag'] = magnitude
        grid.active_scalars_name = 'mag'

        self.grid = grid
        return self.grid
