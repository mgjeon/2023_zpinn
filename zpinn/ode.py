# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_ode.ipynb.

# %% auto 0
__all__ = ['fig', 'ax', 'draw_solution_y_yp', 'draw_solution_y_with_exact_y', 'solve_and_draw_solution_y_with_exact_y',
           'draw_bvp_solution_y_yp']

# %% ../nbs/00_ode.ipynb 4
import numpy as np
import matplotlib.pyplot as plt

# %% ../nbs/00_ode.ipynb 27
def draw_solution_y_yp(t, # the array of time domain [t1, t2, ... ,tN]  
                       y, # the array of ode output [y(t), y'(t)]
                      **kwargs):
    """ Draw ode output [y(t), y'(t)] """
    fig, axes = plt.subplots(nrows=2, ncols=1)

    axes[0].plot(t, y[0], **kwargs) # y(t)
    axes[0].axhline(0, color='k', linewidth=2) # x-axis
    axes[0].axvline(0, color='k', linewidth=2) # y-axis
    axes[0].grid(True)
    axes[0].set_xlabel('t')
    axes[0].set_ylabel('y(t)')
    
    axes[1].plot(t, y[1], **kwargs) # y'(t)
    axes[1].axhline(0, color='k', linewidth=2) # x-axis
    axes[1].axvline(0, color='k', linewidth=2) # y-axis
    axes[1].grid(True)
    axes[1].set_xlabel('t')
    axes[1].set_ylabel(r"$y'(t)$")
    
    plt.tight_layout()

# %% ../nbs/00_ode.ipynb 44
def draw_solution_y_with_exact_y(t, # the array of time domain [t1, t2, ... ,tN]  
                                    f, # the array of ode output target function y(t)
                                    f_exact):  # the array of ode analytic function y(t)
    """ Draw ode output y(t) with analytical y(t) """
    fig, ax = plt.subplots(nrows=1, ncols=1)

    ax.plot(t, f, color='blue', linestyle='solid', label='numerical') # y(t)
    ax.plot(t, f, color='red', linestyle='dashed', label='analytic') # y(t)                                 
    ax.axhline(0, color='k', linewidth=2) # x-axis
    ax.axvline(0, color='k', linewidth=2) # y-axis
    ax.grid(True)
    ax.set_xlabel('t')
    ax.set_ylabel('y(t)')
    ax.legend()
                                        
    plt.tight_layout()

# %% ../nbs/00_ode.ipynb 51
fig, ax = plt.subplots(nrows=1, ncols=1)

@wigets.interact(N=(2, 50, 1))
def solve_and_draw_solution_y_with_exact_y(N # the number of points within the domain
                                          ):
    """[Ineractive purpose] Given N, solve the ivp problem and plot the solution function y(t)"""
    t = np.linspace(t_span[0], t_span[1], N)
    sol = solve_ivp(F, t_span, y0, t_eval=t) # Here, we don't use dense_output because we want to see the effect of N
    t_eval = np.linspace(t_span[0], t_span[1], 1000)
    y_exact = f_exact(t_eval)

    plt.cla()
    ax.plot(sol.t, sol.y[0], color='blue', linestyle='solid', label='numerical') # y(t)
    ax.plot(t_eval, y_exact, color='red', linestyle='dashed', label='analytic') # y(t)                                 
    ax.axhline(0, color='k', linewidth=2) # x-axis
    ax.axvline(0, color='k', linewidth=2) # y-axis
    ax.grid(True)
    ax.set_xlabel('t')
    ax.set_ylabel('y(t)')
    ax.legend()
    plt.tight_layout()


# %% ../nbs/00_ode.ipynb 74
def draw_bvp_solution_y_yp(x, # the array of time domain [x1, x2, ... ,xN]  
                           y, # the array of ode output [y(x), y'(x)]
                          **kwargs):
    """ Draw ode output [y(x), y'(x)] """
    fig, axes = plt.subplots(nrows=2, ncols=1)

    axes[0].plot(x, y[0], **kwargs) # y(t)
    axes[0].axhline(0, color='k', linewidth=2) # x-axis
    axes[0].axvline(0, color='k', linewidth=2) # y-axis
    axes[0].grid(True)
    axes[0].set_xlabel('x')
    axes[0].set_ylabel('y(x)')
    
    axes[1].plot(x, y[1], **kwargs) # y'(t)
    axes[1].axhline(0, color='k', linewidth=2) # x-axis
    axes[1].axvline(0, color='k', linewidth=2) # y-axis
    axes[1].grid(True)
    axes[1].set_xlabel('x')
    axes[1].set_ylabel(r"$y'(x)$")
    
    plt.tight_layout()
